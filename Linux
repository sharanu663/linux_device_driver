links for udemy course study materials 


1) https://github.com/niekiran/linux-device-driver-1.git

course presentation slides 

2) https://1drv.ms/b/s!Akhv68fruLVPunnvLBoIL0-Gu-et?e=cCnfvr


information of 
https://github.com/barisCanCoskun/-Linux-Device-Driver-Programming-With-Beaglebone-Black-LDD1-.git


we required 3 software for boot up beaglebone black 
1) pre-build -images  contain (am335x-boneblack.dtb : Device tree binary of BBB, MLO: primary boot loader(memory loader), u-boot.img :u-bootloader image,uEnv.txt:u-boot commands and env setting, UImage: kernel image)g
2) cross compiler 
3) debian (image)
4) Gpart use foe sd card partion


all commands you should run on root directory : beaglbone black 

sudo apt-get update
sudo apt-get install build-essential lzop u-boot-tools net-tools bison flex libssl-dev libncurses5-dev libncursesw5-dev unzip chrpath xz-utils minicom wget git-core

boot images and root file system
https://www.beagleboard.org/boards/beaglebone-black

this package we need download from the above link:
https://www.beagleboard.org/distros/am335x-11-7-2023-09-02-4gb-microsd-iot

gcc cross compiler :
sudo apt-get install gcc-arm-linux-gnueabihf

cross compiler and toolchain :

   https://www.linaro.org/downloads/
     |-> check this name : Linaro's GNU and LLVM Toolchains:
                          select part of  gnu gcc compiler download :
                    |-> Linaro also provides monthly GNU Toolchain Integration Builds  here will get link 
			https://snapshots.linaro.org/gnu-toolchain/?_gl=1*1juixms*_ga*MTQyNjIwNTI3MC4xNzQ5NDUzMjAz*_ga_E12E6FXFVK*czE3NDk2NTQxOTMkbzUkZzEkdDE3NDk2NTQzNjIkajYwJGwwJGgw			  			
                          |-> 14.0-2023.06-1
                              |->arm-linux-gnueabihf
                                   |-> gcc-linaro-14.0.0-2023.06-x86_64_arm-linux-gnueabihf.tar.xz

gparted applicaation will use to partition the Micro SD card

https://gparted.org/download.php

add the tool chain path to the home directory .bashrc file:

run the command on the terminal :

menaka@menaka-IdeaPad-Slim-3-14IAH8:~$ vi .bashrc 

copy the this Path to paste in .bashrc file :

export PATH=$PATH:/home/menaka/lld/downloads/gcc-linaro-7.1.1-2017.05-x86_64_arm-linux-gnueabihf/bin
or
echo export PATH=$PATH:/home/menaka/lld/downloads/gcc-linaro-7.1.1-2017.05-x86_64_arm-linux-gnueabihf/bin > ~/.bashrc


menaka@menaka-IdeaPad-Slim-3-14IAH8:~$ source .bashrc
menaka@menaka-IdeaPad-Slim-3-14IAH8:~$ arm     //press Tab you can see all bins files

open the gparted application:
earse the sd card
1) create new partition 
    for BOOT and ROOTFS
   select option for BOOT : create as : primary partition, new side : 512MB, fils system : fat16,label: BOOT
   select option for BOOT : create as : primary partition, fils system :ext4 ,label: ROOTFS
then apply 
2) once done we have to select flags :
     right click BOOT partition label : select manage flags here you select  "boot" and "lba"
close the app


open terminal :
copy from the pc to sd card 
lsblk : list block devices and you can see the ur sd partition 
cp -a * /media/kiran/BOOT/
sync
extract the debian image :
unxz debian file name
once extract is done got to that location and right click and select "open with Disk image mounter"
check mounted or not for that again run the :
lsblk   here you can see /media/kiran/roots
copy from the pc to sd card :
sudo cp -a * /media/kiran/ROOFS/
sync




to open the minicom 
sudo minicom -s
setup the port number using alphebet 
once done select the :
save setup as dfl
after that 
exit


To exit from the minicom:
 CTRL+A followed by key X




/******************************************************************************
Now compile the kernel source files ( before was kernel pre-build image we used)
/**********************************************************************************/
https://github.com/beagleboard/linux
  
 this version below link:  v5.10.168-ti-rt-r76
 copy this url : https://github.com/beagleboard/linux.git or downlaod the kernel source file 

open new terminal :
go to source directory under lld
 git init
 git clone https://github.com/beagleboard/linux.git linux_bb_5.10



STEP 1:
/*
 *removes all the temporary folder, object files, images generated during the previous build. 
 *This step also deletes the .config file if created previously 
 */
make ARCH=arm distclean

STEP 2:
/*creates a .config file by using default config file given by the vendor */

make ARCH=arm bb.org_defconfig

|----------------------------------------------------------------------------------------------------------------
 right now not use STEP 3:
/*This step is optional. Run this command only if you want to change some kernel settings before compilation */ ​

make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig
|--------------------------------------------------------------------------------------------------------------------

STEP 4:
/*Kernel source code compilation. This stage creates a kernel image "uImage" also all the device tree source files will be compiled, and dtbs will be generated */ ​

make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- uImage dtbs LOADADDR=0x80008000 -j4

STEP 5:
/*This step builds and generates in-tree loadable(M) kernel modules(.ko) */

make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf-  modules  -j4

STEP 6:
/* This step installs all the generated .ko files in the default path of the computer (/lib/modules/<kernel_ver>) */​

sudo make ARCH=arm  modules_install



menaka@menaka-IdeaPad-Slim-3-14IAH8:~$ cd /lib/modules
menaka@menaka-IdeaPad-Slim-3-14IAH8:/lib/modules$ ls
5.10.168  6.14.0-15-generic



/***********************compile kernel source and copy to SD Card***************************/
the lld/source/linux/arch/arm/boot see here uImage copy  and then update the boot partition of the SD card

menaka@menaka-IdeaPad-Slim-3-14IAH8:~/lld/source/linux-5.10.168-ti-rt-r76/arch/arm/boot$ ls
bootp	    deflate_xip_data.sh  Image	     Makefile  zImage
compressed  dts			 install.sh  uImage
menaka@menaka-IdeaPad-Slim-3-14IAH8:~/lld/source/linux-5.10.168-ti-rt-r76/arch/arm/boot$ 
cp uImage /media/menaka/BOOT/
sync
cd dts/
ls -l am335*
copy this file 
cp am335x-boneblack.dtb /media/menaka/BOOT/
sync

copy the newly installed under host machine /lib/modules/5.10.168 folder to board's /lib/modules

menaka@menaka-IdeaPad-Slim-3-14IAH8:~$ cd lld/source/linux-5.10.168-ti-rt-r76
menaka@menaka-IdeaPad-Slim-3-14IAH8:~/lld/source/linux-5.10.168-ti-rt-r76$ cd /lib/modules
menaka@menaka-IdeaPad-Slim-3-14IAH8:/lib/modules$ ls
5.10.168  6.14.0-15-generic
menaka@menaka-IdeaPad-Slim-3-14IAH8:/lib/modules$ 

sudo cp -a 5.10.168/ /media/menaka/ROOTFS/lib/modules/
sync

/***************************notes **************************/

linux kernel module : nothing but add device and removing device at linux run time.

static dynamic linux kernel module:
static kernel module : if you build module as part of final kernel image, this modules are can't unload.
already it occupies the memory permanently during  run time.

dynamic kernel : this modules are not part of kernel image, you can load and unload the module during 
run time.
 commnds : insmod, rmmod  

static int __init funname(void)
         return 0;
static void __exit funcname(void)

module_init(funname);
module_exit(funcname);

In case of your module dynamic, this function will get called during module insertion 
In case of you module static, this function will get called during boot time. 


__init macro is a technique,when used with a function,the kernel will free the code memory of the function
after execution.

In the make file :

make -C $KDIR M=$PWD[Targets]

obj-<X> :=mian.o

X = n do not compile the module 
X =y compile the module and link with kernel image
X=m, compile as dynamically loadable kernel module


Taget : modules
        module_install
        clean

        

make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -C /path of taget kernel source file M=$coustm driver file path  modules

ex:
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- -C /home/menka/lld/source file M=$pwd modules

if get any error try below one 
cat  /home/menaka/.bashrc
copy the cross compiler tool chain path.

and open sudo vi /etc/sudoers
go to "secur_path"  got to end :paste here

arm-linux-gnueabihf-objdump -h main.ko  //give the inforamtion verious kernel section

In tree building  :adding our module inside the kernel soruce tree and build kernel along our module 

1. go to target linux directory inside "/drivers/char"  here create a folder /my_c_dev
  write ur example code main.c.
2. same directroy create kconfig file and add the below entries
  menu "my custom modules"
    config CUSTOM_HELLOWORLD
          tristate "hello_world_module_support"
           default n
  endmenu

3. go to /char kconfig file add the local kconfig entry to upper level kconfig
    cd ..
    vi Kconfig and add the just created the kconfig file here
   source "drivers/char/my_c_dev/Kconfig"

    
4. create a local Makefile in the new directroy that is my_c_dev
     vim Makefile
5. add obj-$(config_item)+=<module>.o in to local Makefile
           obj-$(config name)
    ex:  obj-$(CUSTOM_HELLOWORLD) += main.o
6. add the local level makefile to higher level makefile (driver/char  directroy)
        open vim makefile under char directroy 
        and add the "obj-y +=my_c_dev/               //directroy name we created now

see the menuconfig your helloworld 
make ARCH=arm menuconfig
    here got to device driver -> character device driver-> fastbit custom module ->helloworld module support 

build cmd: make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- modules -j4


printk message will store into the kernel ring buffer is called kernel log
dmesg | tail -5  //it show latest 5 kernel messages
dmesg | head -20  //it show first 20 kernel messages


all device file present in the /dev directory in root 
 every device is register to VFS(virtual file system)

manjor number : basically refer to device 
miniot number : it refers to instance of same device 


// to reslove the kernel UImage error 
scripts/config --disable KERNEL LZ4
scripts/config --disable KERNEL GZIP









