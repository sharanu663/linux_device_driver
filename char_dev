kernel APIs and utilities to be used in driver code of charcter :
#include <linux/module.h>
#include <linux/fs.h>
#include <linux/cdev.h>
#include <linux/device.h>

Dynamically register range of char device number:

creation:

alloc_chrdev_region(dev_t *dev,unsigned baseminor,unsigned count,const char *name); //create device number

dev_t dev : output parameter for first assigned number.
unsigned baseminor: first of the requested range of minor numbers
unsigned count: number of minor number required
char *name : name of the associated device or driver


void cdev_init(struct cdev *cdev,const struct file_opertions *fops)   //make a char device registration with the VFS
struct cdev *cdev : structure initialize
struct file_opertions *fops file operation for this device

//add a char device to the kernel VFS
int cdev_add(struct cdev *p,dev_t dev,unsigned count);
struct cdev *p: cdev structure for the device
dev_t dev : first device number for which this device is responsible
unsigned count : number of consecutive minor number crossesponding to this device

class_create(struct module *owner,const char *name);    
 // create device files, create directory in sysfs: /sys/class/<your_class_name>

struct module *owner: pointer to the module that is to "own" this struct class
const char *name: string name of this class

// driver will export all the information such as device file name,major,minor
//number to sysfs by calling the function device_create 
// this function will create subdirectory under /sys/class/<your_class_name>with your device name

device_create(struct class *class, struct device *parent,dev_t devt,void *drvdata,const char *fmt);  

struct class *class: pointer to the struct class that this device should be registered to
struct device *parent: pointer to the parent struct device of this new device
dev_t devt: dev_t for the char device to be added
void *drvdata : data to be added to the device for callbacks
const char *fmt : string for the device's name




Deletion:

device_destory(struct class *class,dev_t devt);
class_destroy(struct class *cls);
cdev_del(strcut cdev *p);
unregister_chrdev_region(dev_t from,unsigned count);




whenever user space request some opertion then it will for to VFS(virtual file system)
later appropriate function get called.
-------------------------------------------------------------------------------------------
                fd=open("/dev/pcd",O_RDWR);
user space      /dev/pcd  
------------------|-------------------------
kernel space      | 
         --------<-|
         |  VFS |----------> int pcd_open();
         |----- |             pcd_driver
opens a file by creating
a new file object and linking
it to the corresponding
inode object.
--------------------------------------------------------------------------------

struct inode: inode is a VFS data structure that holds general information about a file
and tracks  interaction on an opened file by the user process, each file has is own inode object,
which the filesystem uses to identify the file. each inode object associated with an inode number,
which uniquely identifies the file the filesystem.
inode object is created and stored in memory as and when a new file (regular or device) gets created.
"if any changes in the inode member elements then that will writtern back to disk"


struct file: whenever a file opened a file object is created in kernel space. there will one file 
object for every open of a regular or device file.
stored information abt the interaction b/w an open file and a process
"content not written back to disks unlike inode"

these function get called when user space called open function 

user space           open()
-------------------------------------------------
kernel space       do_sys_open()
                  do_filp_open()  // file object allocation 
                 do_dentry_open()  // default dummy file operation function will called
                  chrdev_open()    // replacing default fops with 'cdev' fops
                 your driver open method()

                       close(fd);
user space           /dev/pcd()
-------------------------------------------------
kernel space     
        |-------|
        |  VFS  | ---------------> int pcd_release();
        |-------|
 Releases the file object.
called when the last reference to 
an open file is closed- that is,
when the f_count field of the file 
object becomes 0.


summary:

when device file gets created:
1) create device file using udev
2) inode object gets created in memory and inode's i_rdev field is initialized with device number
3) inode object's i_fop field is set to dummy default file opertions(def_chr_fops)

when user process executes open system call
1) user invokes open system call on the device file
2) file object get created
3) inode's i_fop gets copied to file object's f_op (dummy file opertions of char device file)
4) open function of dummy default file opertion gets called(chrdev_open)
5) inode object's i_cdev field is initialized with cdev which you added during cdev_add
   (lookup happens using inode->i_rdev field)
6) inode->cdev->fops (this is a real fileoperations of your driver) gets copied to file->f_op
7) file->f_op->open method gets called (read open method of your driver)


Dynamic device file creation on linux:
*) you can create a device file bynamically, you need not manually create the device files under
/dev directory to access your hardware.
*) user_level program such as udev can populate /dev directroy with device files dynamically
*) udev prg listen to the uevents generated by hot plug events or kernel modules.
  when udev receives the uevents, it scans the subdirectories of /sys/class looking for the
 'dev' files to create device files.
*) for each dev file, which represent a combination of major and minor number for a device


the buffer size of kernel 512 bytes

cd /sys/class  : check here your class name
cd /sys/class/<your_class_name>/sub_directory  : check here your dev file
cat dev  // shows the major and minor number
cat uevent  // shows the major and minor and devicename =pcd


macro of dev_t is (uint32_t) 

int minor_no =MINOR(device_nu);   //this macro is will give minor
int major_no = MAJOR(device_nu); // this macro is will give major
MKDEV(int major,int minor);    //it will give device type

macro THIS_MODULE : point to the module that owns this structure; it should usually be initialized
to THIS_MODULE.
this field is used to prevent the module from being unloaded while structure is in use.

copy_to_user()
copy_from_user() 

/*device creation*/
dev_t device_nu

alloc_chrdev_region(&device_nu,0,6,"pcd_devices");


struct cdev pcd_cdev;        
struct file_opertions pcd_fops;   //this structure will provide the various function (read,write,llseek,etc)
cdev_init(&pcd_cdev,&pcd_fops);

pcd_cdev.ownder = THIS_MODULE;
cdev_add(&pcd_cdev,device_number,1);

/*create device class under /sys/class/ */
struct class *pcd_class;
pcd_class = class_create(THIS_MODULE,"pcd_class");

/*populate the sysfs with device information */
struct device *device_pcd;
device_pcd= device_create(class_pcd,NULL,device_nu,NULL,"pcd");  //2nd argument should use when parent and child hairerkey     



/* clean up function*/

   device_destroy(class_pcd,device_nu);
  class_destroy(class_pcd);
  cdev_del(&pcd_cdev);
 unregister_chrdev_region(device_nu,1);















