





Nordic build system using zephyr os :

Kconfig    -------->|
                    |
                    |---------> Cmake -------->Ninja-------->gcc
                    |
Device tree ------->|  

On:ESP32:
build command 
west build -p always -b <board_name>  -- -DDTC_OVERLAY_FILE=boards/esp32.overlay (path of .overlay file ) 

 below mention command after build command  whatever giving that paramters going to cmake, not west
here -DDTC_OVERLAY_FILE=boards/esp32.overlay (path of .overlay file ) command going to cmake file

without west tool how to build:
cmake -G "Ninja" -DBOARD=<board_name> -DDTC_OVERLAY_FILE=boards/esp32.overlay -B build -S.
build command:
cmake --build build

ex:

/ {
  	leds {
  		compatible = "gpio-leds";
  		led_0 {
  			gpios = <&gpio0 1 GPIO_ACTIVE_LOW>;
  		};
  		led_1 {
  			gpios = <&gpio0 2 GPIO_ACTIVE_HIGH>;
  		};
  		led_2 {
  			gpios = <&gpio1 15 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;
  		};
  	};
  };

  Above:

  - led_0 is pin 1 on gpio0. The LED is on when the pin is low,
    and off when the pin is high.
  - led_1 is pin 2 on gpio0. The LED is on when the pin is high,
    and off when it is low.
  - led_2 is pin 15 on gpio1. The LED is on when the pin is low,
    and the pin's internal pull-up resistor should be enabled.



ex: 

/{

    aliases{
        my-led = &led0;          //here label refernce of led0 and giving aliases name as my-led
    };
    leds{
        compatible = "gpio-leds";
        led0: d13 {
           gpios = <&gpio0 13 GPIO_ACTIVATE_HIGH>;
        };

     };
};


another example of esp32 board :
our application creating boards folder and create a file esp32s3_devkitc.overlay under board directory itself
we are changing the some of the parmeter or setup for device tree

/{

    aliases{
        my-led = &button_1           //here label refernce of led0 and giving aliases name as my-led
    };
    buttons{
        compatible = "gpio-keys";
        debounce-interval-ms = <50>  // here we are changing the default debounce time
        polling-mode;

        button_1: d5 {
           gpios = <&gpio0 5 (GPIO_ACTIVATE_LOW | GPIO_PULL_UP)>;
        };

     };
};



west is meta tool here that tells zephyr we want to build our project and it's going to call the CMake in order to make that happen


if getting build issue:like permissoin 
Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted -Force



app
|          |---> include --> test.h   
|---> src---
|          |----> src----> test.c and main.c
CMakeLists.txt
prj.conf


cmake example above file structure:

cmake_minimum_required(VERSION 3.20.0)

#name the project
project (hello_word
         VERSION 1.0
         DESCRIPTION "the classic"
         LANGUAGES C)
#Create a static library target named "my_lib"
add_library(my_lib
    STATIC
    src/my_lib.c)

#set the include directories for the library.PUBLIC adds the
#directory to the search path for any target that link to this library.
target_include_directories(my_lib PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)

#create an executable target with the same name as the project name
add_executable(${PROJECT_NAME} src/main.c)

#link the library to the executable. PRIVATE means that the library is not 
# exposed to targets that depend on this target.
target_link_libraries(${PROJECT_NAME} PRIVATE my_lib)



build:
-S is source path, -B create build directory  , -G tell to generate Ninja build file
cmake -S . -B build -G "Ninja"

executable file  :
cmake --build build

pratical_zephyr_dt
https://interrupt.memfault.com/blog/practical_zephyr_dt

modern-cmake guid:
https://cliutils.gitlab.io/modern-cmake/README.html

yaml:
https://spacelift.io/blog/yaml


device tree bindings :
https://www.kernel.org/doc/Documentation/devicetree/bindings/

device tree spection document tell abt systex:
https://github.com/devicetree-org/devicetree-specification/releases/tag/v0.4


github account: example code on esp32 using zephyr rtos 
https://github.com/ShawnHymel/workshop-zephyr-device-driver
https://www.youtube.com/watch?v=mTJ_vKlMS_4&list=PLEBQazB0HUyTmK2zdwhaf8bLwuEaDH-52

youtube link of stm32 using zephyros 
https://www.youtube.com/watch?v=hkYtD_JjzIY

how to write device tree for HAL driver for that how to create the devie driver 
https://docs.zephyrproject.org/latest/build/dts/howtos.html#set-devicetree-overlays


Below details about stm32f401er device tree :
dts file:
/home/menaka/zephyrproject/zephyr/dts/arm/st/f4/stm32f4.dtsi
/home/menaka/zephyrproject/zephyr/dts/arm/st/f4/stm32f401Xe.dtsi

using : compatible = "st,stm32f4-adc", "st,stm32-adc";
name search for binding file

/home/menaka/zephyrproject/zephyr/dts/bindings/adc/st,stm32f4-adc.yaml

/home/menaka/zephyrproject/zephyr/dts/bindings/adc/st,stm32-adc.yaml
|->/home/menaka/zephyrproject/zephyr/dts/bindings/adc/adc-controller.yaml
    |-> /home/menaka/zephyrproject/zephyr/dts/bindings/base/base.yaml
          |-> /home/menaka/zephyrproject/zephyr/dts/bindings/base/pm.yaml
|->/home/menaka/zephyrproject/zephyr/dts/bindings/pinctrl/pinctrl-device.yaml

driver adc :
compatible: "st,stm32-adc" is match to  #define DT_DRV_COMPAT st_stm32_adc
/home/menaka/zephyrproject/zephyr/drivers/adc/adc_stm32.c
/home/menaka/zephyrproject/zephyr/include/zephyr/drivers/adc.h
  |-> /home/menaka/zephyrproject/zephyr/include/zephyr/device.h



Below example about esp32 driver create :

modules
|->button
    |->drivers
       |->button
           |->button.h , button.c , CMakeLists.txt Kconfig
       |CMakeLists.txt Kconfig
    |CMakeLists.txt Kconfig            
    |--> dts
         |-> bindings
             |-->input 
                 |-->custom,button.yaml
    |->zephyr
       |--> module.yaml


button.h:

#ifndef ZEPHYR_DRIVERS_H
#define ZEPHYR_DRIVERS_H

#include <zephyr/drivers/gpio.h>


// we declare our own api function
struct button_api {
   int (get*)(const struct device *dev,unit8_t *state);

};

//configuration
struct button_config {
  struct gpio_dt_spec btn;
  uint32_t id;

};


#endif 




button.c:


//we need to create compatible field symbol or string  that lets zephyr knows that this is driver code for the compatible 
//listed in the binding yml file as well as the compatible property in the device tree  
//ties to the 'compatible = "custom,button" ' node in the device tree

#define DT_DRV_COMPAT custom_button


#include  <error.h>
#include "button.h"

#include <zephyr/logging/log.h>

// Enable logging at CONFIG_LOG_DEFAULT_LEVEL 
LOG_MODULE_REGISTER(button)  // here we registering the modules


//--------------------------------------------------------------
 // private function 
static int button_init(const struct device *dev);  // this function get called after boot and initalize the module 
static int button_state_init(const struct device *dev,uint8_t *state);

//-----------------------------------------------------------------------------


static int button_init(const struct device *dev)
{
    int ret;

   // cast device.config (declared const void *) to our button's config
  const struct button_config *cfg = (const struct button_config *)dev->config;

 // get the button struct from the config
  const struct gpio_dt_spec *btn = &cfg->btn;

  LOG_DBG("initalizing button (instance ID = %u)\n", cfg->id);

  if(gpio_is_ready_dt(btn)){
     LOG_ERR("GPIO is not ready/n");
     return -ENODEV;

  }
  ret = gpio_pin_configure_dt(btn,GPIO_INPUT);
  if(ret < 0) {
     LOG_ERR("GPIO configuration is failed/n");
     return -ENODEV;

  }
  return 0;

}

static int button_state_get(const struct device *dev,uint8_t *state)
{
       int ret;

   // cast device.config (declared const void *) to our button's config
  const struct button_config *cfg = (const struct button_config *)dev->config;

 // get the button struct from the config
  const struct gpio_dt_spec *btn = &cfg->btn;


  ret = gpio_pin_get_dtc(btn);
  if(ret < 0) {
     LOG_ERR("GPIO is not ready failed/n");
     return ret;
   }else {

      *state = ret;
  }
}



//---------------------------------------------------------------------------

// devicetree handling

static const struct button_api button_api_funcs = {

  .get = button_state_get,
};



// Expansion macro to define driver instances 

// this macro will create multipal instance of this driver code for different multipal button
#define BUTTON_DEFINE(inst)                                                   \
/*create an instance of the config struct,populate with DT values*/           \

static const struct button_config button_config_##inst = {                     \

    .btn = GPIO_DT_SPEC_GET(DT_PHANDLE(DT_INST(inst,custom_button),pin),gpio),  \
    .id = inst                                                                  \
};                                                                              \

/* Create a "device" instance from a devicetree node identifier and */           \
/* registers the init function to run during boot. */                            \
DEVICE_DT_INST_DEFINE(inst,button_init,NULL,NULL,&button_config_##inst,          \
                      POST_KERNEL,CONFIG_GPIO_INIT_PRIORITY,                    \
                      &button_api_funcs);                                       \




// devicetree build process or zephyr call this macro it looks for this macro whenever you pass it in this driver code as 
// we defined up top with the dtdv compact macro so once the build process knows that this is a module it's considered  a 
// driver it looks for this macro or somethings similar  once sees this macro it's going to call the macro
//that's passed in as the argument in this case it's going to call button define and it knows to pass button define an instance number
//so for each instance in the device tree of this device that matches that compatible in this case 'custom,button' as long as the 
//status for that node is set to okay it will call this button defined macro and that's going to generate code for that particular
// instance and it's going to pass in a generated instance number like 0,1,2 so on let's see if we can look
// gives it an instance number that has been generated by the build system with that our driver code is done but now we still need to 
// create a module bindings Kconfig and devicetree information so we are only part of the way done creating our driver but the code is done




// the devicetree build process calls this to create an instance of struct for 
//each device (button) define in the devicetree 
DT_INST_FOREACH_STATUS_OKAY(BUTTON_DEFINE)




 modules/button/drivers/button/CMakeLists.txt:


#Declares the current directroy as a zephyr library
#if no name is given, the name is derived from the directory name

zephyr_library()


#list the source code files for the library
zephyr_library_source(button.c)

#Add header files to the cmake search directories 
zephyr_include_directories(.)




modules/button/drivers/CMakeLists.txt:

#custom zephyr function that imports the button/ subdirectroy if the Kconfig
# option CUSTOM_BUTTON is defined

add_subdirectory_ifdef(CONFIG_CUSTOM_BUTTON button)



modules/button/CMakeLists.txt:


add_subdirectory(drivers)

zephyr_include_directories(drivers)




 modules/button/drivers/button/Kconfig:

config CUSTOM_BUTTON
  bool "custom button"
  default n
  depends on GPIO    #make it dependent on GPIO driver 
  help 
    Enable the custom button driver.


 modules/button/drivers/Kconfig:

rsource "button/Kconfig"

modules/button/Kconfig:

rsource "drivers/Kconfig"


modules/button/dts/bindings/input/custom,button.yaml:

 #description of the device 
description: custom button

#Compatibility string that matches the one in the devicetree source and 
#DT_DRV_COMPAT macro in the driver source code 
compatible: "custom,button"


#Define the required node properties
properties:
  pin:
    type: phandle
    required: true


modules/button/zephyr/module.yaml:


name: button
build:
  cmake: .
  kconfig: Kconfig
  settings:
    dts_root: .







application code :

application/demo_device_driver/boards/esp32_dev.overlay

esp32_devkit.overlay

/{
  aliases {
     my-button-1 = &button_1;
      my-button-2 = &button_2;
 };

  custom-buttons {
      button_1: custom_button_1 {

            compatible = "custom,button";
           pin = <&d4>;
       };
      button_2: custom_button_2 {
            compatible = "custom,button";
           pin = <&d5>;
       };
  };

   gpio-keys {
       compatible = "gpio-keys"
       debounce-interval-ms = <50>;
       polling-mode;
       d4: gpio4 {
            gpios = <&gpio0 4 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        };

        d5: gpio5 {
            gpios = <&gpio0 5 (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>;
        };
    };


};

application/demo_device_driver/src/main.c 

//#include <zephyr/drivers/adc.h>
#include <zephyr/kernel.h>
#include <stdio.h>
#include "button.h"


static const struct device *btn_1 = DEVICE_DT_GET(DT_ALIAS(my_button_1));
static const struct device *btn_2 = DEVICE_DT_GET(DT_ALIAS(my_button_2));



int main(void)
{
   int ret;
   uint8_t state1,state2;

  if (!((device_is_ready(btn_1)) && (device_is_ready(btn_2)))) {
		printk("error: buttons are not ready\n");
		return 0;
	}


  const struct button_api *btn_api = (const struct  button_api *) btn_1->api;
    while(1)
   {

         ret = btn_api->get(btn_1,&state1);
        if (ret < 0) {
			      printf("error: (%d): failed to read button 1 pin\n", ret);
			      continue;
		    }


        ret = btn_api->get(btn_2,&state2);
        if (ret < 0) {
			      printf("error: (%d): failed to read button 2 pin\n", ret);
			      continue;
		    }
   }
}



application/demo_device_driver/CMakeLists.txt

cmake_minimum_required(VERSION 3.20.0)


set(ZEPHYR_EXTRA_MODULES "${CMAKE_SOURCE_DIR}/../modules/button")

find_package(Zephyr REQUIRED HINTS $ENV{ZEPHYR_BASE})

project(custom_button)

target_sources(app PRIVATE src/main.c)



application/demo_device_driver/prj.conf
CONFIG_CUSTOM_BUTTON=y
CONFIG_GPIO=y
CONFIG_LOG=y
CONFIG_LOG_DEFAULT_LEVEL=4




Devicetree build flow:

   device binding -------->|
                           |
                           |---------> generated c header -------->devicetree.h-------->zephyr and application source code files
                           |
 Devicetree source ------->|  
All Zephyr and application source code files can include and use devicetree.h. This includes device drivers, applications, tests, the kernel, etc.



Property type                 How to write                  Example

string                       Double quoted              a-string = "hello, world!";

int                  between angle brackets (< and >)        an-int = <1>;

boolean            for true, with no value                    my-true-boolean;
                 (for false, use /delete-property/)        

array          between angle brackets (< and >),            foo = <0xdeadbeef 1234 0>;
                 separated by spaces                      

uint8-array       in hexadecimal without leading 0x,         a-byte-array = [00 01 ab];
                  between square brackets ([ and ]).          

string-array        separated by commas                    a-string-array = "string one", "string two", "string three";

phandle            between angle brackets (< and >)             a-phandle = <&mynode>;

phandles          between angle brackets (< and >),            some-phandles = <&mynode0 &mynode1 &mynode2>;
                      separated by spaces                      

phandle-array       between angle brackets (< and >),          a-phandle-array = <&mynode0 1 2>, <&mynode1 3 4>;
                        separated by spaces  



/dts-v1/;

/ {
     chosen {
             zephyr,console = &uart0;
     };

     aliases {
             my-uart = &uart0;
     };

     soc {
             uart0: serial@12340000 {
                     ...
             };
     };
};

The /aliases and /chosen nodes do not refer to an actual hardware device. Their purpose is to specify other nodes in the devicetree.

Above, my-uart is an alias for the node with path /soc/serial@12340000. Using its node label uart0, the same node is set as the value of the chosen zephyr,console node.

Zephyr sample applications sometimes use aliases to allow overriding the particular hardware device used by the application in a generic way. For example, Blinky uses this to abstract the LED to blink via the led0 alias.

The /chosen node’s properties are used to configure system- or subsystem-wide values. See Chosen nodes for more information.

input files:

There are four types of devicetree input files:

    sources (.dts)

    includes (.dtsi)

    overlays (.overlay)

    bindings (.yaml)

The devicetree files inside the zephyr directory look like this:

boards/<ARCH>/<BOARD>/<BOARD>.dts
dts/common/skeleton.dtsi
dts/<ARCH>/.../<SOC>.dtsi

Binding file names usually match their compatible: lines. For example, compatible: "foo-company,bar-device" then binding would be named foo-company,bar-device.yaml by convention.
The build system looks for bindings in dts/bindings subdirectories 
dts/bindings/.../binding.yaml


Get a struct device from a devicetree node:

When writing Zephyr applications, you’ll often want to get a driver-level struct device corresponding to a devicetree node.
For example, with this devicetree fragment, you might want the struct device for serial@40002000:

/ {
        soc {
                serial0: serial@40002000 {
                        status = "okay";
                        current-speed = <115200>;
                        /* ... */
                };
        };

        aliases {
                my-serial = &serial0;
        };

        chosen {
                zephyr,console = &serial0;
        };
};

using one of this option we will get the device node identification :

/* Option 1: by node label */
#define MY_SERIAL DT_NODELABEL(serial0)

/* Option 2: by alias */
#define MY_SERIAL DT_ALIAS(my_serial)

/* Option 3: by chosen node */
#define MY_SERIAL DT_CHOSEN(zephyr_console)

/* Option 4: by path */
#define MY_SERIAL DT_PATH(soc, serial_40002000)

ex:

const struct device *const uart_dev = DEVICE_DT_GET(MY_SERIAL);

if (!device_is_ready(uart_dev)) {
        /* Not ready, do not use */
        return -ENODEV;
}

For exaample I need to check whather my device is initialized or not, using this macro will check DT_NODE_HAS_STATUS if status is "okay"
then initialized succesful, otherwise failed:

#define MY_SERIAL DT_NODELABEL(my_serial)

#if DT_NODE_HAS_STATUS(MY_SERIAL, okay)
const struct device *const uart_dev = DEVICE_DT_GET(MY_SERIAL);
#else
#error "Node is disabled"
#endif

or using: device_get_binding

const char *dev_name = /* TODO: insert device name from user */;
const struct device *uart_dev = device_get_binding(dev_name);


 check if a node has a property:

#if !DT_NODE_EXISTS(DT_PATH(zephyr_user)) || \
	!DT_NODE_HAS_PROP(DT_PATH(zephyr_user), io_channels)
#error "No suitable devicetree overlay specified"
#endif

ex:

/dts-v1/;

/ {

	aliases {
		sensor-controller = &i2c1;
	};

	soc {
		i2c1: i2c@40002000 {
			compatible = "vnd,soc-i2c";
			label = "I2C_1";
			reg = <0x40002000 0x1000>;
			status = "okay";
			clock-frequency = < 100000 >;
		};
	};
};

DT_NODE_HAS_PROP(DT_NODELABEL(i2c1), clock_frequency)  /* expands to 1 */
Don’t use DT_NODE_HAS_PROP() for boolean properties. Use DT_PROP() instead as shown above. It will expand to either 0 or 1 depending on if the property is present or absent.

DT_PROP(node_id, property):

Use DT_PROP(node_id, property) to read basic integer, boolean, string, numeric array, and string array properties.

For example, to read the clock-frequency property’s value in the above example:

DT_PROP(DT_PATH(soc, i2c_40002000), clock_frequency)  /* This is 100000, */
DT_PROP(DT_NODELABEL(i2c1), clock_frequency)          /* and so is this, */
DT_PROP(DT_ALIAS(sensor_controller), clock_frequency) /* and this. */

#define I2C1 DT_NODELABEL(i2c1)
DT_PROP(I2C1, status)  /* expands to the string literal "okay" */



Properties access of the node :

ex: 

foo: foo@1234 {
        a = <1000 2000 3000>; /* array */
        b = [aa bb cc dd];    /* uint8-array */
        c = "bar", "baz";     /* string-array */
};

accessign the properties of foo label 


#define FOO DT_NODELABEL(foo)

int a[] = DT_PROP(FOO, a);           /* {1000, 2000, 3000} */
unsigned char b[] = DT_PROP(FOO, b); /* {0xaa, 0xbb, 0xcc, 0xdd} */
char* c[] = DT_PROP(FOO, c);         /* {"foo", "bar"} */

You can use DT_PROP_LEN() to get logical array lengths in number of elements.

size_t a_len = DT_PROP_LEN(FOO, a); /* 3 */
size_t b_len = DT_PROP_LEN(FOO, b); /* 4 */
size_t c_len = DT_PROP_LEN(FOO, c); /* 2 */

DT_PROP_LEN() cannot be used with the special reg or interrupts properties. These have alternative macros which are described next.

You cannot read register block addresses and lengths with DT_PROP(node, reg). 
Instead, if a node only has one register block, use DT_REG_ADDR or DT_REG_SIZE:

 DT_REG_ADDR(node_id): the given node’s register block address
 DT_REG_SIZE(node_id): its size






Devicetree bindings syntax:  

# When the description text is too long, this field can
# be used to improve readability, e.g.:
#
# title: Binding the device's hardware model.
#
# description |
#   A piece of content with 20 lines.
#   ...

title: Concise title for the long description [optional]


# A high level description of the device the binding applies to:
description: |
   This is the Vendomatic company's foo-device.

   Descriptions which span multiple lines (like this) are OK,
   and are encouraged for complex bindings.

   See https://yaml-multiline.info/ for formatting help.


# You can include definitions from other bindings using this syntax:
include: other.yaml

# Used to match nodes to this binding:
compatible: "manufacturer,foo-device"

properties:
  # Requirements for and descriptions of the properties that this
  # binding's nodes need to satisfy go here.

child-binding:
  # You can constrain the children of the nodes matching this binding
  # using this key.

# If the node describes bus hardware, like an SPI bus controller
# on an SoC, use 'bus:' to say which one, like this:
bus: spi

# If the node instead appears as a device on a bus, like an external
# SPI memory chip, use 'on-bus:' to say what type of bus, like this.
# Like 'compatible', this key also influences the way nodes match
# bindings.
on-bus: spi

foo-cells:
  # "Specifier" cell names for the 'foo' domain go here; example 'foo'
  # values are 'gpio', 'pwm', and 'dma'. See below for more information.



/*****************************************************************/
how to over write existence  configure file for example:

In existence dts file spi pins configured default pin but project we are using different pins that 
we have to do like this 


ex: 
   particular board .dts file like this present 
    &spi2 {
	pinctrl-0 = <&default_pins>;    // like this  //  default_pins are child node of pintrl1 node  in pintctrl.dtsi files
	pinctrl-names = "default";
	status = "okay";
   };

   overlay file 

   /{
       chosen {
		zephyr,disply = &node_labe     // your display node lable mention here
	};

	mipi_dibi{

		mention related to compatible 
		reset_pin
		spi-dev = <&spi2>;   //display will using spi2 


     	}


   };
   
   &spi2{
   
      pinctrl-0 = <&custom_pins>;
      status = "okay";
   };
   
   pinctrl1{
   	custom_pins:custom_pins_spi{   // create you own child node and copy exitence default pin defined formate and make pin change number on overlay file
   	
   		group1{
   	
   			pinmux = < here you can modify pins number which are using for your project for spi>;
   	
   		};
   		group2{
   	
   			pinmux = < here you can modify pins number which are using for your project for spi>;
   	
   		};
   	
   	};     
   };

/*********************************************************************************/


How to delete the property if defined dts and dtsi file : for that take phandle reference or node path use the "/delete-property/" later you mention
property name, which property decided to delete
/***********************************************************************/
/ {
	aliases {
		i2c-0 = &i2c1;
	};
};

&i2c1 {
	/delete-property/ clock-frequency;
	clock-frequency = <I2C_BITRATE_FAST>;
};







1) Some hardware busses provide "discoverability" mechanisms: means that we can identify which device is connected on this busess
EX: PC(e),USB
Device can be enumerated and identfied at runtime
Concept of vendor ID,product ID,device class,etc

2) Some hardware busses do not provide "discoverability" mechanisms: means that we can't identify which device is connected on this busess
   Ex: i2c,SPI,1wire
  How does operating system get to know what is topology of hardware?
 Allow the operating system or bootloader to know things like : provide details of the device that used like pherephiral,clock, number of cores

  how to provide board the details to operating system ? Directly in the OS/bootloader
  1) using compiled data structures,typically in C
  2) How it was done on most embedded platforms in linux,U-Boot
  3) Considered not maintainable/sustainable on ARM32, which motivated the move to another solution.
   






device tree will be present on this path: "arch/ARCH/boot/dts"

Device tree : A tree structure describing the hardware is writtern by a developer
in a device tree source file(.dts)
processed by the device tree compiler (dtc)
produces a more efficient representation: device tree Blob, dtb
Additional C preprocessor pass 


Device tree files are not monolithic, they can be split in several files,
including each other.

Device tree inheritance :

.dtsi files are included files,while .dts files are final device trees
  only .dts files are accepted as input to dtc
Typically, .dtsi will contain
   1) definitions of SOC-level information
   2) definitions common to several boards
the .dts files contains the board-level infomation
Allows an including file to override value specified by an included file
uses the C pre-processor #include directive








Now used most Embedded-oriented CPU architecture that run Linux: ARM64,RISC-V,ARM32,
 Power PC,MIPS,etc



     I/P                         compiler                        O/P 
Device tree source (dts)---> Device tree compiler (dtc) ----> Device tree Blob(.dtb)

Disadavantage is : Considered not maintainable/sustainable on ARM32, which motivated the
                    move to another solution.
that is called "ACPI" tables : is support on 0x86 system and subset of ARM64 platforms
                        Tables provided by the Firmware on BIOS in 0x86 system, UFI also


Node name is in the format systex : node-name@unit-address

node-name:
The node-name component specifies the name of the node. It shall be 1 to 31 characters in length

 Character
 0-9                digit
 a-z               lowercase letter
 A-Z               uppercase letter
 ,                 comma
 .                 period
 _                 underscore
 +                 plus sign
 -                  dash
node-name should mention in the generic name (like what type peripherals, protocal name)

 • adc
 • accelerometer
 • air-pollution-sensor
 • atm
 • audio-codec
 • audio-controller
 • backlight
 • bluetooth
 • bus
 • cache-controller
 • camera
 • can
 • charger
 • clock
 • clock-controller
 • co2-sensor
 • compact-flash
 • cpu
 • cpus
 • crypto
 • disk
 • display
 • dma-controller
 • dsi
 • dsp
 • eeprom
 • efuse
 • endpoint
 • ethernet
 • ethernet-phy
 • fdc
 • flash
 • gnss
 • gpio
 • gpu
 • gyrometer
 • hdmi
 • hwlock
 • i2c
 • i2c-mux
 • ide
 • interrupt-controller
 • iommu
 • isa
 • keyboard
 • key
 • keys
 • lcd-controller
 • led
 • leds
 • led-controller
 • light-sensor
 • lora
 •magnetometer
 •mailbox
 •mdio
 •memory
 •memory-controller
 •mmc
 •mmc-slot
 •mouse
 • nand-controller
 • nvram
 • oscillator
 • parallel
 • pc-card
 • pci
 • pcie
 • phy
 • pinctrl
 • pmic
 • pmu
 • port
 • ports
 • power-monitor
 • pwm
 • regulator
 • reset-controller
 • rng
 • rtc
 • sata
 • scsi
 • serial
 • sound
 • spi
 • spmi
 • sram-controller
 • ssi-controller
 • syscon
 • temperature-sensor
 • timer
 • touchscreen
 • tpm
 • usb
 • usb-hub
 • usb-phy
 • vibrator
 • video-codec
 • vme
 •watchdog
 •wif



unit-address: basically tell about base address of the component or any peripherls in the board 
1) The unit-address component of the nameis specific to the bus type on which the node sits.
2) The unit-address must match the first address specified in the reg property of the node.
   If the node has no reg property, the @unit-address must be omitted(negalate) and the node-name alone differentiates the
   node from other nodes at the same level in the tree.
3) In the case of node-name without an @unit-address the node-name shall be unique from any property names at the same
   level in the tree.
4) The root node does not have a node-name or unit-address. It is identified by a forward slash (/).


different types of properties:
standard and non-standard property (custom property)
  1) standard property are thos which is explained by the specification
      and the deivce-binding documentation
  2) custom properties are specific to a particular vendor or organization which
      is not documented by the specification.
  

uses of compatible property
 1) machine identification and initialization 
 2) match and load the appropriate driver for the device

using compatible name  we can find out the driver and call the prob function when kernel going to initialize 


In the linux source tree : linux-5.4/arch/arm/boot/dts
      drivers:   linux-5.4/drivers/i2c/busses/i2c-omap.c 
eeprom  device :   linux-5.4/drivers/misc/eeprom/at24.c


device tree bindings:
How do you know the whic property name and value pair should be used to
 describe a node in the device tree?
     device tree binding document. the driver writer must document these details
  linux-5.4/Documentation/devicetree/bindings/i2c/i2c-omap.txt 
 give overview information all the properties  

Device tree bindings -points to remember:
case 1 :  When the driver is already available in the linux kernel for the deivce 'x',
but you just need to add device 'x' entry in the device tree then you must consult 'x' driver binding document which
guides you through creating device tree node for device 'x'.

check driver is present or not :
ex: lm75 temprature sensor:
linux-5.4/Documentation/devicetree/bindings/hwmon/lm75.txt 
linux-5.4/drivers/hwmon/lm75.c


Case2 : when the driver is not availabel for the device 'x', then you should write you own driver, you should
decide what properties to use(could be a combination of standard and non-standard property),
you should then provide the deive tree binding document describing what are all the properties and compatible strings a device tree write nust include.






ex: 
(master)
   i2c-0 <----------|
                    |------------ slave device 1 (slave address is 0x24)
                    |------------ slave device 2 (slave address is 0x50)
for example:
In soc level dtsi file will get i2c0 related information 
 /{
    i2c0: i2c@44e0b000{                  // base address of i2c0
         compatible = "ti,omap4-i2c";
         #address-cell = <1>;
         #size-cell = <0>;
        ti,hwmods = <70>;
         reg = <44e0b000 0x1000>;          // base address of i2c0 and offset
         interrupts = <70>;
         status = "disabled";
     };

  };

now we to provide what are deivce is connected on this bus and if you want changes anything you can change parameter values
how to asscess? using label name through we can access  what is label name here? see above soc level dtsi file :  i2c0 
dts file

  /{
 
     &i2c0{

          status = "okay";
          clock-frequency = <40000>;
          tps: tps@24 {        // child node of i2c0 and 24 is slave1 adress
             reg = <0x24>;      // slave 1 address
             };

           baseboard_eeprom: baseboard_eeprom@50 {        // child node of i2c0 and 50 is slave2 adress
             reg = <0x50>;      // slave 2 address
             };
      };
   };

ex: foo.dts
   /dts-v1/ ; 
 / {
        welcome = <0xBADCADFE>;
        bootlin {
                    webinar = "great";
                    demo = <1>,<2>,<3>;
   };

compile command : dtc -I dts -O dtb -o foo.dtb foo.dts

/{
    node@0{
         a-string-property = "A String";
          a-string-list-property = "frist String","second string";
          a-byte-data-property = [0x01,0x02,0x34,0x54];  #---> bytestring

             child-node@0 {
                  frist-child-property;
                  second-child-property = <1>;
                  a-reference-to-something = <&node1>;
              };

               child-node@1 {
                };
           };
   
         node1:node@1 {              
            an-empty-property;
            a-cell-property = <1 2 3 4>;
               
                child-node@1 {
                };
          };
};

1) node@0 -> node is node name, 0-> unit address
2)  properties of node@0
      property name       property value
    a-string-property =     "A String";
    a-string-list-property = "frist String","second string";
    a-byte-data-property = [0x01,0x02,0x34,0x54];
 3) line number 72 is  "node1:" is called as label
 4) a-cell-property = <1 2 3 4>;   // four cells(32 bits values)


another exmple :

/ {

      model = STM32MP157C-DK2 Discovery Board " ; # here you write the modul name of devices which going to support this node
      compatible = "st,stm32mp157c" ,"st,stm32mp157";   //which are board series will support this node
      cpus {......};
      memory@0 {.....};
      chosen {......};
      intc: interrupt-controller@a0021000 {.....};
      soc {
            i2c1: i2c@400120000 {....};
            ethernet0: ethernet@5800a000 {......};
       };
 };

"**) how to overwrite value that is given in .dtsi in default 
     below example we change status "disable" to "okay" using .dts file, final output will get status = "okay"
  ex:  soc.dtsi
      /{ 
        soc {
               usart: serial@5c00000 {
               compatible = "st,stm32h7-uart";
               reg=<0x5c000 0x4000>;
               status = "disable";
                };
           };
       };
   
 board.dts
   #include "soc.dtsi
   /{ 
        soc {
            serial@5c00000 {
            status = "okay";
            };
         };
       };
   
   or
  board.dts
   #include "soc.dtsi 
      &usart {
       status = "okay"; 
       };

compatible propert: it is used by the operating system to find the appropriate
drvier for this device.
when describing real hardware,typical from is vendor,model
special value : simple bus -> bus where all sub nodes are memory-mapped devices

reg : use as memory mapped : <base pyhsical address and size of the memory-mapped register.
ex: reg = <0x5000243 0x03>
if reg using as i2c : address of the device on the I2C bus
 ex: 
    &i2c1 {
        cs4251:cs4251@4 {
         reg = <0x04>;
        };
     };
 in spi:
        &qspi {
        flash1:mx4421213 {
         reg = <1>;
        };
     };


cell concept :
1)Interger values represented as 32-bit integers called cells
2) encoding a 64-bit value requires two cells
3) #address-cells and #size-cells : how many cells are used in sub-nodes
to encode the address and size in the reg property

ex:  soc {
       compatible = "simple-bus";
         #address-cells = <1>;
         #size-cells = <1>;

         i2c@f1001000 {
             reg = <f1001000 0x1000>;
            #address-cells = <1>;
            #size-cells = <0>;
            eeprom@52{
               reg = <0x52>;
            };
         };
     };

   ex:
   soc {
        clkc: clock@f1003000 {
       compatible = "foo,bar-clock";
        reg = <f1003000 0x1000>;
        #clock-cells = <3>;
        };
       i2c@f1001000 {
           clocks = <&clkc 12,24,32>;
        };
  };
       

status : two values "okay" or "ok" and "disabled" 
           "okay" or "ok"  : device is really in use
            "disabled" or ther value : device is not used  




